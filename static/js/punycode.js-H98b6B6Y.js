const t=2147483647,o=36,n=/^xn--/,e=/[^\0-\x7F]/,r=/[\x2E\u3002\uFF0E\uFF61]/g,c={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},s=Math.floor,i=String.fromCharCode;function f(t){throw new RangeError(c[t])}function l(t,o){const n=t.split("@");let e="";n.length>1&&(e=n[0]+"@",t=n[1]);const c=function(t,o){const n=[];let e=t.length;for(;e--;)n[e]=o(t[e]);return n}((t=t.replace(r,".")).split("."),o).join(".");return e+c}function u(t){const o=[];let n=0;const e=t.length;for(;n<e;){const r=t.charCodeAt(n++);if(r>=55296&&r<=56319&&n<e){const e=t.charCodeAt(n++);56320==(64512&e)?o.push(((1023&r)<<10)+(1023&e)+65536):(o.push(r),n--)}else o.push(r)}return o}const a=function(t,o){return t+22+75*(t<26)-((0!=o)<<5)},d=function(t,n,e){let r=0;for(t=e?s(t/700):t>>1,t+=s(t/n);t>455;r+=o)t=s(t/35);return s(r+36*t/(t+38))},h=function(n){const e=[],r=n.length;let c=0,i=128,l=72,u=n.lastIndexOf("-");u<0&&(u=0);for(let t=0;t<u;++t)n.charCodeAt(t)>=128&&f("not-basic"),e.push(n.charCodeAt(t));for(let h=u>0?u+1:0;h<r;){const u=c;for(let e=1,i=o;;i+=o){h>=r&&f("invalid-input");const u=(a=n.charCodeAt(h++))>=48&&a<58?a-48+26:a>=65&&a<91?a-65:a>=97&&a<123?a-97:o;u>=o&&f("invalid-input"),u>s((t-c)/e)&&f("overflow"),c+=u*e;const d=i<=l?1:i>=l+26?26:i-l;if(u<d)break;const p=o-d;e>s(t/p)&&f("overflow"),e*=p}const p=e.length+1;l=d(c-u,p,0==u),s(c/p)>t-i&&f("overflow"),i+=s(c/p),c%=p,e.splice(c++,0,i)}var a;return String.fromCodePoint(...e)},p=function(n){const e=[],r=(n=u(n)).length;let c=128,l=0,h=72;for(const t of n)t<128&&e.push(i(t));const p=e.length;let g=p;for(p&&e.push("-");g<r;){let r=t;for(const t of n)t>=c&&t<r&&(r=t);const u=g+1;r-c>s((t-l)/u)&&f("overflow"),l+=(r-c)*u,c=r;for(const v of n)if(v<c&&++l>t&&f("overflow"),v===c){let t=l;for(let n=o;;n+=o){const r=n<=h?1:n>=h+26?26:n-h;if(t<r)break;const c=t-r,f=o-r;e.push(i(a(r+c%f,0))),t=s(c/f)}e.push(i(a(t,0))),h=d(l,u,g===p),l=0,++g}++l,++c}return e.join("")},g={version:"2.3.1",ucs2:{decode:u,encode:t=>String.fromCodePoint(...t)},decode:h,encode:p,toASCII:function(t){return l(t,(function(t){return e.test(t)?"xn--"+p(t):t}))},toUnicode:function(t){return l(t,(function(t){return n.test(t)?h(t.slice(4).toLowerCase()):t}))}};export{g as p};
